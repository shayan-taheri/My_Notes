{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fmodern\fcharset0 Courier-Bold;
\f3\fnil\fcharset178 GeezaPro;\f4\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red0\green61\blue204;\red249\green255\blue248;\red255\green39\blue18;
\red0\green0\blue169;\red58\green0\blue98;\red29\green96\blue0;\red73\green0\blue38;}
\margl1440\margr1440\vieww16880\viewh11880\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs36 \cf0 Stack
\fs32 \

\b0\fs28 \
\pard\pardeftab720

\f1 \cf2 \cb3 template < class T, class Container = deque <T> > class stack;
\f0 \cf0 \cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
\pard\pardeftab720

\f1 \cf2 \cb3 // T = Type of the elements.\
// Container = Type of the underlying container (Example: deque, vector, \'85).\
// "Container" is "deque" by default.
\f0 \cf0 \cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
a. It is a type of container adaptor.\
b. 
\b Operate in LIFO context (Last-In-First-Out)
\b0 .\
c. TOP of the Stack = Elements are inserted and extracted from one end (side) of the container.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 Important
\b0 :\
\
1) \cf4 Stack is a class\cf0  (= Container)\
2) Stack has an \ul underlying container\ulnone \
3) The \ul underlying container\ulnone  is an encapsulated object of a \ul specific container class\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \ulnone 4) The underlying container should support the following operations:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 *
\b0  
\f1 back
\f0 \

\b *
\b0  
\f1 push_back
\f0 \

\b *
\b0  
\f1 pop_back\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0 \cf0 \ul \ulc0 Example for Underlying Container\ulnone : 
\f1 vector, deque, list\
\

\f2\b\fs32 FORMAT: 
\fs28 stack < \cf5 Type\cf0 , underlying_container <\cf5 Type\cf0 > > name;\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qr

\f3\fs32 \cf0 \'e4\uc0\u1705 \'ca\'e5
\f4 :
\f3  
\b0 \'81\'d4\'ca\'e5 \uc0\u1740 \u1705  \u1705 \'e1\'c7\'d3 \'c7\'d2 \u1705 \'e1\'c7\'d3\u1740  \'cf\u1740 \'90\'d1 \'c7\'d3\'ca. \u1740 \'da\'e4\u1740  \u1740 \u1705  \'81\'d4\'ca\'e5 \u1705 \'e1\'c7\'d3\u1740  \'c7\'d3\'ca \u1705 \'e5 \'e3\u1740  \'ce\'e6\'c7\'e5\'cf \'c7\'d2 \u1705 \'e1\'c7\'d3 \u1740 \'c7 \u1705 \'c7\'e4\'ca\u1740 \'e4\'d1 \'cf\u1740 \'90\'d1 \'e3\'d8\'c7\'c8\'de \'c7\'da\'e3\'c7\'e1 \'e3\'e6\'d1\'cf \'e4\'d9\'d1 \'ce\'e6\'cf 
\f4 ( 
\f3 \uc0\u1740 \'da\'e4\u1740  \'c2\'ce\'d1\u1740 \'e4 \'e6\'d1\'e6\'cf \'a1 \'c7\'e6\'e1\u1740 \'e4 \'ce\'d1\'e6\'cc 
\f4 )
\f3  \'c7\'d3\'ca\'dd\'c7\'cf\'e5 \'e4\'e3\'c7\uc0\u1740 \'cf. \uc0\u1740 \'da\'e4\u1740  \'e5\'d1 \'e3\'e6\'de\'da \'cf\'d1 \'81\'d4\'ca\'e5 \'da\'e3\'e1 \'81\'c7\'81 \'d1\'c7 \'c7\'e4\'cc\'c7\'e3 \'c8\'cf\'e5\u1740 \'e3 \'a1 \'c2\'ce\'d1\u1740 \'e4 \'e6\'d1\'e6\'cf\u1740  \'e6\'c7\'d1\'cf \'d4\'cf\'e5 \'a1 \'ce\'c7\'d1\'cc \'e3\u1740  \'90\'d1\'cf\'cf.\

\fs28 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b \cf0 Example:\
\
\pard\pardeftab720

\f1\b0\fs24 \cf6 #include <iostream>       \cf7 // std::cout\cf0 \
\cf6 #include <stack>          \cf7 // std::stack\cf0 \
\cf6 #include <vector>         \cf7 // std::vector\cf0 \
\cf6 #include <deque>          \cf7 // std::deque\cf0 \
\
\pard\pardeftab720
\cf5 int\cf0  main ()\
\{\
  std::deque<\cf5 int\cf0 > mydeque (3,100);          \cf7 // deque with 3 elements\cf0 \
  std::vector<\cf5 int\cf0 > myvector (2,200);        \cf7 // vector with 2 elements\cf0 \
\
  std::stack<\cf5 int\cf0 > first;                    \cf7 // empty stack\cf0 \
  std::stack<\cf5 int\cf0 > second (mydeque);         \cf7 // stack initialized to copy of deque\cf0 \
\
  std::stack<\cf5 int\cf0 ,std::vector<\cf5 int\cf0 > > third;  \cf7 // empty stack using vector\cf0 \
  std::stack<\cf5 int\cf0 ,std::vector<\cf5 int\cf0 > > fourth (myvector);\
\
  std::cout << \cf8 "size of first: "\cf0  << first.size() << \cf8 '\\n'\cf0 ;\
  std::cout << \cf8 "size of second: "\cf0  << second.size() << \cf8 '\\n'\cf0 ;\
  std::cout << \cf8 "size of third: "\cf0  << third.size() << \cf8 '\\n'\cf0 ;\
  std::cout << \cf8 "size of fourth: "\cf0  << fourth.size() << \cf8 '\\n'\cf0 ;\
\
  \cf5 return\cf0  0;\
\}}