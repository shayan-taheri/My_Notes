{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier-Bold;\f2\fnil\fcharset0 Verdana;
\f3\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green45\blue153;\red0\green0\blue169;}
\margl1440\margr1440\vieww16700\viewh14760\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs28 \cf0 1) 
\fs32 Break 
\fs28  -->  
\f1 \cf2 break;
\f0 \cf0 \
\
\pard\pardeftab720

\b0 \cf0 The break statement causes a switch statement, while loop, do while loop, or for loop to terminate. In the context of a switch statement, a break is typically used at the end of each case to signify the case is finished (which prevents fall-through).\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 2) 
\fs32 Continue
\fs28  -->  
\f1 \cf2 continue;
\f0 \cf0 \
\
\pard\pardeftab720

\b0 \cf0 The continue statement provides a convenient way to jump back to the top of a loop earlier than normal, which can be used to bypass the remainder of the loop for an iteration. It means that after "continue", all of the other statements will be ignored and it will go to the next iteration of loop.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 2) 
\fs32 Functions
\fs28 \
\
\pard\pardeftab720

\b0 \cf0 A function is a group of statements that is executed when it is called from some point of the program.
\f2\fs24 \
\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clcbpat1 \clwWidth14480\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrs\brdrw20\brdrcf0 \clbrdrl\brdrs\brdrw20\brdrcf0 \clbrdrb\brdrs\brdrw20\brdrcf0 \clbrdrr\brdrs\brdrw20\brdrcf0 \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720
\cf0 \

\f0 {{\NeXTGraphic scope_of_variables.gif \width8280 \height5980 \noorient
}¬}
\f2 \cell \lastrow\row
\pard\pardeftab720

\f0\b\fs28 \cf0 \
\
\pard\pardeftab720
\cf0 \ul \ulc0 Regular Mode
\b0 \ulnone  --> \ul Arguments passed by Value\ulnone \
\
\pard\pardeftab720

\fs24 \cf0 {{\NeXTGraphic function_arguments.gif \width4620 \height1280 \noorient
}¬}\pard\pardeftab720

\f2 \cf0  
\f0\fs28 \
\
The arguments passed to the functions have been passed by \ul value\ulnone . This means that when calling a function with parameters, what we have passed to the function were \ul copies of their values\ulnone  but never the variables themselves. Any modification to the variables \ul within the function\ulnone  
\b addition
\b0  will not have any effect in the \ul variables outside it\ulnone .\
\
\pard\pardeftab720

\b \cf0 \ul Manipulating Mode
\b0 \ulnone  --> \ul Arguments passed by Reference\
\
\ulnone There might be some cases where you need to manipulate from inside a function the value of an external variable. For that purpose we can use arguments passed by reference. The type of each parameter is followed by an 
\b ampersand sign (&)
\b0  in this mode.\
\
When a variable is passed by reference we are not passing a copy of its value, but we are somehow passing the variable itself to the function and any modification that we do to the local variables will have an effect in their counterpart variables passed as arguments in the call to the function.
\f2\fs24 \
\
\pard\pardeftab720

\f0 \cf0 {{\NeXTGraphic function_by_reference.gif \width6300 \height1380 \noorient
}¬}\pard\pardeftab720

\fs28 \cf0 \
\
\pard\pardeftab720

\b \cf0 Overloaded Functions:\
\
\pard\pardeftab720

\b0 \cf0 In C++, \ul two different functions\ulnone  can have the \ul same name\ulnone  if their parameter types or number are different. That means that you can give the same name to more than one function if they have either a different number of parameters or different types in their parameters.\
\
\pard\pardeftab720

\b\fs24 \cf0 Example:
\b0\fs28 \
\
\pard\pardeftab720

\f3\fs24 \cf3 int\cf0  operate (\cf3 int\cf0  a, \cf3 int\cf0  b)\
\{\
  \cf3 return\cf0  (a*b);\
\}\
\
\cf3 float\cf0  operate (\cf3 float\cf0  a, \cf3 float\cf0  b)\
\{\
  \cf3 return\cf0  (a/b);\
\}\
\
\pard\pardeftab720

\f0\b\fs28 \cf0 inline Functions:\
\

\b0 It is used to suggest to the compiler that the code generated by the function body is inserted at each point the function is called, instead of being inserted only once and perform a regular call to it, which generally involves some additional overhead in running time. The format for its declaration is:
\f2\fs24 \
\

\f3\fs28 \cf2 inline type name ( arguments ... ) \{\
	instructions ...\
\}}