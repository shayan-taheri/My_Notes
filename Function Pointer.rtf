{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Verdana;\f2\fmodern\fcharset0 Courier;
\f3\fnil\fcharset178 GeezaPro;\f4\fnil\fcharset0 LucidaGrande;\f5\fmodern\fcharset0 Courier-Bold;
}
{\colortbl;\red255\green255\blue255;\red198\green50\blue253;\red58\green0\blue98;\red0\green0\blue169;
\red0\green0\blue127;\red109\green109\blue109;\red102\green0\blue0;\red255\green39\blue18;\red174\green0\blue240;
}
\margl1440\margr1440\vieww27580\viewh10200\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs36 \cf0 Function Pointer
\b0\fs28 \
\
\pard\pardeftab720
\cf0 In order to declare a pointer to a function we have to declare it like the prototype of the function except that 
\b \ul the name of the function is enclosed between parentheses\ulnone  () and \ul an asterisk\ulnone  
\fs32 \cf2 *
\fs28 \cf0  \ul is inserted before the name
\b0 \ulnone .\
\
The typical use of this is \ul for passing a function as an argument to another function\ulnone , since these cannot be passed dereferenced.\
\

\b Example 1:
\f1\b0\fs24 \
\
\pard\pardeftab720

\f2 \cf3 #include <iostream>\cf0 \
\pard\pardeftab720
\cf4 using\cf0  \cf4 namespace\cf0  std;\
\
\cf4 int\cf0  addition (\cf4 int\cf0  a, \cf4 int\cf0  b)\
\{ \cf4 return\cf0  (a+b); \}\
\
\cf4 int\cf0  subtraction (\cf4 int\cf0  a, \cf4 int\cf0  b)\
\{ \cf4 return\cf0  (a-b); \}\
\
\cf4 int\cf0  operation (\cf4 int\cf0  x, \cf4 int\cf0  y, \cf4 int\cf0  (*functocall)(\cf4 int\cf0 ,\cf4 int\cf0 ))\
\{\
  \cf4 int\cf0  g;\
  g = (*functocall)(x,y);\
  \cf4 return\cf0  (g);\
\}\
\
\cf4 int\cf0  main ()\
\{\
  \cf4 int\cf0  m,n;\
  \cf4 int\cf0  (*minus)(\cf4 int\cf0 ,\cf4 int\cf0 ) = subtraction;\
\
  m = operation (7, 5, addition);\
  n = operation (20, m, minus);\
  cout <<n;\
  \cf4 return\cf0  0;\
\}\
\
\pard\pardeftab720

\f0\b\fs28 \cf0 Example 2:
\b0\fs24 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
\pard\pardeftab720

\f2 \cf5 void\cf0  func (\cf5 void\cf0 );\
\pard\pardeftab720\sa273
\cf0 ...\
\pard\pardeftab720
\cf5 void\cf0 (*func_ptr)(\cf5 void\cf0 ) = func;\
\
func_ptr();    \cf6 // call func\cf0 \
(*func_ptr)(); \cf6 // call func\cf0 \
\
printf(\cf7 "%d\\n"\cf0 , ptr); \
printf(\cf7 "%d\\n"\cf0 , *ptr);\
\
\pard\pardeftab720\qr

\f0\fs28 \cf0 \
\pard\pardeftab720\qr

\f3\b\fs32 \cf0 \'e4\uc0\u1705 \'ca\'e5
\f0\b0 \uc0\u8235 :
\f3 \uc0\u8236  \'e4\'c7\'e3\uc0\u1740  \u1705 \'e5 \'cf\'d1 \'cf\'c7\'ce\'e1 \'81\'d1\'c7\'e4\'ca\'d2 \'c8\'da\'cf \'c7\'d2 \'d3\'ca\'c7\'d1\'e5 \'de\'d1\'c7\'d1 \'e3\u1740  \'90\u1740 \'d1\'cf \'c7\'d4\'c7\'d1\'e5 \'90\'d1 \'c8\'e5 \'ca\'c7\'c8\'da \'e3\u1740  \'c8\'c7\'d4\'cf \u1740 \'da\'e4\u1740  \ul \'ca\'e4\'e5\'c7 \'e4\'c7\'e3 \'c8\'cf\'e6\'e4 \'81\'d1\'c7\'e4\'ca\'d2 \'e4\'e3\'c7\uc0\u1740 \'c7\'e4\'90\'d1 \'c7\'d4\'c7\'d1\'e5 \'90\'d1 \'c7\'d3\'ca\ulnone  \'e6 \'c7\'90\'d1 \'81\'d3 \'c7\'d2 \'ca\'da\'d1\uc0\u1740 \'dd \'c7\'d4\'c7\'d1\'e5 \'90\'d1 \'a1 \'cf\'d1 \'cc\'c7\u1740 \u1740  \'c7\'d2 \'c8\'d1\'e4\'c7\'e3\'e5 \'c2\'e4 \'d1\'c7 \'e5\'e3\'d1\'c7\'e5 \'81\'d1\'c7\'e4\'ca\'d2 \'c8\u1740 \'c7\'e6\'d1\u1740 \'e3 \'cf\'d1 \'cd\'de\u1740 \'de\'ca \'c8\'e5 \'ce\'e6\'cf \'ca\'c7\'c8\'da \'e3\'e6\'d1\'cf \'e4\'d9\'d1 \'d1\'cc\'e6\'da \u1705 \'d1\'cf\'e5 \'e6 \'c2\'e4 \'d1\'c7 \'dd\'d1\'c7 \'ce\'e6\'c7\'e4\'cf\'e5 \'c7\u1740 \'e3\uc0\u8235 .\uc0\u8236 \
\

\b \'e4\uc0\u1705 \'ca\'e5
\f4\b0 \uc0\u8235 :
\f3 \uc0\u8236  \cf8 \'e4\'c7\'e3 \'e5\'d1 \'ca\'c7\'c8\'da \'e4\'e3\'c7\uc0\u1740 \'c7\'e4\'90\'d1 \'c2\'cf\'d1\'d3 \'c2\'e4 \'ca\'c7\'c8\'da \'c7\'d3\'ca\cf0  \'a1 \'e5\'e3\'8d\'e6\'e4 \'c2\'d1\'c7\uc0\u1740 \'e5 \u1705 \'e5 \'e4\'c7\'e3 \'c2\'e4 \'e4\'e3\'c7\u1740 \'c7\'e4\'90\'d1 \'c2\'cf\'d1\'d3 \'c7\'e6\'e1\u1740 \'e4 \'ce\'c7\'e4\'e5 \'c2\'e4 \'c7\'d3\'ca\uc0\u8235 .\uc0\u8236 \
\
\pard\pardeftab720\qr

\f0\fs28 \cf0 \
\pard\pardeftab720\qr

\f3\b\fs32 \cf0 \'e4\uc0\u1705 \'ca\'e5 \'e3\'e5\'e3 
\f0\b0 \uc0\u8235 :\uc0\u8236 \
\pard\pardeftab720
\cf0 \

\b If :\
\
\pard\pardeftab720

\f2\b0\fs28 \cf4 Type1 function (Type2 arg1, ...);\
\
Type1 (*fp)(Type2, ...);\
\
\pard\pardeftab720

\f0\b\fs32 \cf0 Some Equivalent Expressions :\
\
\pard\pardeftab720

\f2\b0\fs28 \cf4 fp 
\f5\b\fs32 \cf8 ==
\f2\b0\fs28 \cf4  function 
\f5\b\fs32 \cf8 ==
\f2\b0\fs28 \cf4  &function\
\
function() 
\f5\b\fs32 \cf8 ==
\f2\b0\fs28 \cf4  fp() 
\f5\b\fs32 \cf8 ==
\f2\b0\fs28 \cf4  (*fp)()\
\
\pard\pardeftab720\qr

\f3\b\fs32 \cf0 \'e4\uc0\u1705 \'ca\'e5 
\f4 \uc0\u8235 :
\f3\b0 \uc0\u8236  \'c7\'90\'d1 \'c8\'ce\'e6\'c7\'e5\uc0\u1740 \'e3 \u1705 \'e5 \'e3\'de\'cf\'c7\'d1 \'c8\'d1\'90\'d4\'ca\u1740  \u1740 \u1705  \'ca\'c7\'c8\'da \'a1 \'c7\'d4\'c7\'d1\'e5 \'90\'d1 \'c8\'e5 \'ca\'c7\'c8\'da\u1740  \'cf\u1740 \'90\'d1 \'c8\'c7\'d4\'cf \'a1 \'cf\'d1 \'c7\u1740 \'e4 \'d5\'e6\'d1\'ca \'cf\'e6 \'d1\'e6\'d4 \'cf\'c7\'d1\u1740 \'e3 
\f4 \uc0\u8235 :
\f3 \uc0\u8236 \
\
\uc0\u8235 \uc0\u1777 
\f4 ) 
\f3 \'c7\'c8\'ca\'cf\'c7 \'c7\'d4\'c7\'d1\'e5 \'90\'d1 \'c8\'e5 \'ca\'c7\'c8\'da \'c7\'e6\'e1 \'c8\'e6\'d3\uc0\u1740 \'e1\'e5 
\f2 \cf9 typedef
\f3 \cf0  \'c8\'e5 \'d5\'e6\'d1\'ca \uc0\u1740 \u1705  
\f0 Type
\f3  \'ca\'da\'d1\uc0\u1740 \'dd \'90\'d1\'cf\'cf \'e6 \'d3\'81\'d3 \'c7\u1740 \'e4 
\f0 Type
\f3  \'d3\'c7\'ce\'ca\'e5 \'d4\'cf\'e5 \'c8\'e5 \'da\'e4\'e6\'c7\'e4 
\f0 Return
\f3  
\f0 Type
\f3  \'ca\'c7\'c8\'da \'cf\'e6\'e3 \'cf\'d1 \'e4\'d9\'d1 \'90\'d1\'dd\'ca\'e5 \'d4\'e6\'cf.\uc0\u8236 \
\pard\pardeftab720
\cf0 \

\f0\b\fs28 Example:\
\
\pard\pardeftab720

\f2\b0 \cf4 typedef double (*analysis_fp) (const vector <int>); 	// The constructed type, is a pointer to a function that takes a "vector<int>" and returns "double".\
\
analysis_fp get_analysis_ptr();
\f3\fs32 \cf0 \
\
\pard\pardeftab720\qr
\cf0 \uc0\u8235 \uc0\u1778 
\f4 )
\f3 \uc0\u8236  \'e5\'d1 \'cf\'e6 \'ca\'c7\'c8\'da \'c8\'e5 \'d5\'e6\'d1\'ca \'ca\'e6 \'cf\'d1 \'ca\'e6 \'ca\'da\'d1\uc0\u1740 \'dd \'90\'d1\'cf\'e4\'cf\uc0\u8235 .\uc0\u8236 \
\
\pard\pardeftab720

\f0\b\fs28 \cf0 Example:\
\
\pard\pardeftab720

\f2\b0 \cf4 double (*get_analysis_ptr()) (const vector <int>);	// Declaring a pointer to function inside the declaration of another function.\
}