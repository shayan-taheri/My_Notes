{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fmodern\fcharset0 Courier-Bold;
\f3\fnil\fcharset178 GeezaPro;}
{\colortbl;\red255\green255\blue255;\red0\green45\blue153;\red63\green105\blue30;\red217\green11\blue0;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\b\fs36 \cf0 dynamic_cast
\b0\fs28 \
\

\f1 dynamic_cast
\f0  can be used only with pointers and references to objects. Its purpose is to ensure that the result of the type conversion is a valid complete object of the requested class. So:\
\
1) 
\f1 dynamic_cast
\f0  is always successful when we cast a class to one of its base classes.\
2) 
\f1 dynamic_cast
\f0  can also cast null pointers even between pointers to unrelated classes, and can also cast pointers of any type to void pointers (void*).\
\

\b Example:
\b0 \
\

\f1 \cf2 class CBase \{ \};\
class CDerived: public CBase \{ \};\
\
CBase b; CBase* pb;\
CDerived d; CDerived* pd;\
\
pb = dynamic_cast<CBase*>(&d);     \cf3 // ok: derived-to-base\cf2 \
pd = dynamic_cast<CDerived*>(&b);  \cf3 // wrong: base-to-derived
\f0 \cf0 \
\
Notice: The second conversion in this piece of code would produce a compilation error since 
\b base-to-derived conversions are not allowed with dynamic_cast
\b0  \ul unless the base class is polymorphic\ulnone . When a class is polymorphic, 
\b \cf4 dynamic_cast
\b0 \cf0  \ul performs a special checking during runtime to ensure that the expression yields a valid complete object of the requested class.\ulnone \
\

\b\fs36 static_cast
\b0\fs28 \
\

\f2\b \cf4 static_cast
\f0\b0 \cf0  \ul can perform conversions between pointers to related classes, not only from the derived class to its base, but also from a base class to its derived\ulnone . This ensures that at least the classes are compatible if the proper object is converted, but \ul no safety check is performed during runtime to check if the object being converted is in fact a full object of the destination type\ulnone .\
\

\f1 static_cast
\f0  can also be used to \ul perform any other non-pointer conversion that could also be performed implicitly\ulnone , like for example \ul standard conversion between fundamental types\ulnone  or any conversion between classes with explicit constructors or operator functions as described in "implicit conversions" above.\

\b \
Example 1:
\b0 \
\

\f1 \cf2 class CBase \{\};\
class CDerived: public CBase \{\};\
CBase * a = new CBase;\
CDerived * b = static_cast<CDerived*>(a);
\f0 \cf0 \
\

\b Example 2:
\b0 \
\
\cf2 double d = 3.14159265;\
int i = static_cast <int> (d);\
\
\pard\pardeftab720\qr

\f3 \cf0 \'e4\uc0\u1705 \'ca\'e5
\f0  \uc0\u8235 :\uc0\u8236  
\f3 \'cf\'d1
\f0  
\f3 \'cd\'c7\'e1\'ca
\f0  
\f3 \'c7\'e6\'e1
\f0  
\f3 \'c8\'d1\'d1\'d3\uc0\u1740 
\f0  
\f3 \'cf\'d1\'d3\'ca\uc0\u1740 
\f0  
\f3 \'ca\'c8\'cf\uc0\u1740 \'e1
\f0  
\f3 \'d5\'e6\'d1\'ca
\f0  
\f3 \'e3\uc0\u1740 
\f0  
\f3 \'90\uc0\u1740 \'d1\'cf
\f0  
\f3 \uc0\u1705 \'e5
\f0  
\f3 \'cf\'d1
\f0  
\f3 \'e4\'ca\uc0\u1740 \'cc\'e5
\f0  
\f3 \'d2\'e3\'c7\'e4
\f0  
\f3 \'c8\uc0\u1740 \'d4\'ca\'d1\u1740 
\f0  
\f3 \'e3\'d5\'d1\'dd
\f0  
\f3 \'e3\uc0\u1740  \'d4\'e6\'cf \'e6\'e1\u1740  \'cf\'d1 \'cd\'c7\'e1\'ca \'cf\'e6\'e3 \'c8\'d1\'d1\'d3\u1740  \'d5\'e6\'d1\'ca \'e4\'90\'d1\'dd\'ca\'e5 \'e6 \'cf\'d1 \'e5\'d1 \'d5\'e6\'d1\'ca \'ca\'c8\'cf\u1740 \'e1 \'c7\'e4\'cc\'c7\'e3 \'e3\u1740  \'90\'d1\'cf\'cf \u1705 \'e5 \'e3\'e3\u1705 \'e4 \'c7\'d3\'ca \'ca\'c8\'cf\u1740 \'e1 \u1705 \'c7\'e3\'e1\u1740  \'e4\'c8\'c7\'d4\'cf\uc0\u8235 .\uc0\u8236 }