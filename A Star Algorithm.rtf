{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc3\levelnfcn3\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{upper-alpha\}.}{\leveltext\leveltemplateid202\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww23000\viewh15640\viewkind0
\deftab720
\pard\pardeftab720

\f0\b\fs36 \cf0 The A* Algorithm
\fs28 \
\
The Open and Closed Lists
\b0 \
\
Router will need two lists:\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200
\ls1\ilvl0\cf0 {\listtext	1.	}One to write down all the squares that are being considered to find the shortest path (called 
\b the open list
\b0 )\
{\listtext	2.	}One to write down the square that does not have to consider it again (called 
\b the closed list
\b0 )\
\pard\pardeftab720
\cf0 Router adding its current position to the \ul closed list\ulnone . Then, it adds all walkable tiles adjacent to its current position to the \ul open list\ulnone .\
\

\b Path Scoring\

\b0 \
We\'92ll give each square a score 
\b F = G + H
\b0  where:\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200
\ls2\ilvl0\cf0 {\listtext	\'95	}G is the movement cost from the start point to the current square. So for a square adjacent to the start point, this would be 1, but this will increase as we get farther away from the start point.\
{\listtext	\'95	}H is the estimated movement cost from the current square to the destination point. This is often called the heuristic because we don\'92t really know the cost yet \'96 it\'92s just an estimate.\
\pard\pardeftab720
\cf0 You may be wondering what we mean by \'93movement cost\'94. It will be just the number of squares.\
\
In order to calculate G, we need to take the G of its parent (the square where we came from) and to add 1 to it. Therefore, the G of each square will represent the total cost of the generated path from start point until the square.\
\
For H, we will use the \'93Manhattan distance method\'94 (Also called \'93Manhattan length\'94 or \'93city block distance\'94) that just counts the number of horizontal and vertical square remaining to reach target without taking into account of any obstacles or differences of land.\
\

\b The score of each square: F = G + H
\b0 \
\

\b The A* Algorithm Process
\b0 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200
\ls3\ilvl0\cf0 {\listtext	1.	}Get the square on the open list which has the lowest score. Let\'92s call this square S.\
{\listtext	2.	}Remove S from the open list and add S to the closed list.\
{\listtext	3.	}For each square T in S\'92s walkable adjacent tiles:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa200
\ls3\ilvl1\cf0 {\listtext	A.	}If T is in the closed list: Ignore it.\
{\listtext	B.	}If T is not in the open list: Add it and compute its score.\
{\listtext	C.	}If T is already in the open list: Check if the F score is lower when we use the current generated path to get there. If it is, update its score and update its parent as well.}