{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fmodern\fcharset0 Courier-Bold;
\f3\fnil\fcharset178 GeezaPro;\f4\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red0\green45\blue153;\red249\green255\blue248;\red217\green11\blue0;
\red0\green0\blue123;\red84\green85\blue0;\red24\green83\blue83;\red36\green121\blue0;\red255\green39\blue18;
\red46\green111\blue253;\red234\green234\blue234;\red205\green205\blue205;\red245\green245\blue245;}
\margl1440\margr1440\vieww24120\viewh14860\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs36 \cf0 String\
\
\pard\pardeftab720

\f1\b0\fs28 \cf2 \cb3 typedef basic_string <char> string;\
\
\pard\pardeftab720

\f0 \cf0 \cb3 There are two style for string representations:\
\
1) 
\b \cb3 C - Style\
\

\b0 \cb3 The string is actually a \cb3 \ul one-dimensional array of characters\cb3 \ulnone  which is terminated by a 
\b \cf4 \cb3 null character " \\0 "
\b0 \cf0 \cb3 . So, \cb3 \ul the size of the array of characters\cb3 \ulnone  should be the number of characters that we want plus one (for null character).\
\
\pard\pardeftab720

\b \cf0 \cb3 Important
\b0 \cb3 : When we define 
\b \cb3 a string
\b0 \cb3  with "
\b \cb3 N
\b0 \cb3 " character, the compiler automatically will consider "
\b \cb3 N + 1
\b0 \cb3 " locations in memory for it. Because it will consider the null character. But the compiler will not show the null character to the User.\
\

\b \cb3 Example
\b0 \cb3 :\
\
\pard\pardeftab720

\f1 \cf5 \cb1 char\cf0  greeting\cf6 [\cf7 6\cf6 ]\cf0  \cf6 =\cf0  \cf6 \{\cf8 'H'\cf6 ,\cf0  \cf8 'e'\cf6 ,\cf0  \cf8 'l'\cf6 ,\cf0  \cf8 'l'\cf6 ,\cf0  \cf8 'o'\cf6 ,\cf0  \cf8 '\\0'\cf6 \};	
\f2\b\fs32 \cf0 ==
\f1\b0\fs28 \cf6 	\cf5 char\cf0  greeting\cf6 []\cf0  \cf6 =\cf0  \cf8 "Hello"\cf6 ;\
\
\pard\tx14320\tx19840\pardeftab720\rtlpar\qr

\f3\b\fs32 \cf0 \cb3 \'e4\uc0\u1705 \'ca\'e5
\f0  
\f3 \'e3\'e5\'e3
\f0  \uc0\u8235 :
\b0 \uc0\u8236  
\f3 \'d2\'e3\'c7\'e4\uc0\u1740  \u1705 \'e5 \u1740 \u1705  \'c2\'d1\'c7\u1740 \'e5 \u1705 \'c7\'d1\'c7\u1705 \'ca\'d1\u1740  \'ca\'da\'d1\u1740 \'dd \'e3\u1740  \u1705 \'e4\u1740 \'e3 \'a1 \'cf\'d1 \'c7\u1740 \'e4 \'d5\'e6\'d1\'ca \'c2\'d1\'c7\u1740 \'e5 \'ca\'da\'d1\u1740 \'dd \'d4\'cf\'e5 \u1740 \u1705  
\f0 String
\f3  \'c8\'e6\'cf\'e5 \'e6 \'e3\uc0\u1740  \'c8\'c7\u1740 \'d3\'ca \ul \'c7\'e4\'cf\'c7\'d2\'e5 \'c2\'d1\'c7\uc0\u1740 \'e5\ulnone  \'c8\'e5 \'90\'e6\'e4\'e5 \'c7\uc0\u1740  \'ca\'da\'d1\u1740 \'dd \'90\'d1\'cf\'cf \u1705 \'e5 \'da\'e4\'d5\'d1 \'81\'c7\u1740 \'c7\'e4\u1740  \'c2\'e4 
\f2\b\fs28 \cf8 \cb1 '0\\'
\f3\b0\fs32 \cf0 \cb3  \'c8\'c7\'d4\'cf.\
\

\b \'e4\uc0\u1705 \'ca\'e5
\f0  
\f3 \'e3\'e5\'e3
\f0  \uc0\u8235 :
\b0 \uc0\u8236  
\f3 \uc0\u1705 \'c7\'d1\'c7\u1705 \'ca\'d1 
\f2\b\fs28 \cf8 \cb1 '0\\'
\f3\b0\fs32 \cf0 \cb3  \'cf\'d1 \'cd\'de\uc0\u1740 \'de\'ca \'c8\u1740 \'c7\'e4\'90\'d1 
\f4 NULL
\f3  \'c8\'e6\'cf\'e5 \'e6 \'c8\'cf\uc0\u1740 \'e4 \'e3\'da\'e4\u1740  \'c7\'d3\'ca \u1705 \'e5 \'d1\'d4\'ca\'e5 \'81\'c7\u1740 \'c7\'e4 \u1740 \'c7\'dd\'ca\'e5 \'c7\'d3\'ca \'e6 \'c8\'d1\'e4\'c7\'e3\'e5 \'ca\'c7 \'d2\'e3\'c7\'e4\u1740  \u1705 \'e5 \'c2\'e4 \'d1\'c7 \'81\u1740 \'cf\'c7 \'e4\u1705 \'e4\'cf \'c7\'e4\'ca\'e5\'c7\u1740  
\f0 String
\f3  \'d1\'c7 \'e4\'e3\uc0\u1740  \'c8\'e4\'cf\'cf.
\f1\fs28 \cf6 \cb1 \
\pard\pardeftab720
\cf6 \
\pard\pardeftab720

\f0 \cf0 \cb3 2) 
\b \cb3 C++ - Style\
\

\b0 \cb3 It is a class type that supports some operations.\
\
\pard\pardeftab720

\b \cf0 \cb3 Formats:
\b0 \cb3 \
\
 1) 
\f1 \cf5 \cb1 string\cf0  string_name \cf6 =\cf0  \cf8 "\cf4 Characters_Region\cf8 "\cf6 ;\
\

\f0\b \cf0 \cb3 Very Important:\
\
\pard\pardeftab720

\f1\b0 \cf8 \cb1 "\cf4 Characters_Region\cf8 "
\f0 \cf0 \cb3  --> It is a "String Literal".
\b \cb3 \
\
\pard\pardeftab720

\f1\b0 \cf0 \cb1 string_name
\f0 \cb3  --> It is a "String".
\f1 \cf6 \cb1 \
\
\pard\pardeftab720

\f0 \cf0 \cb3  2) 
\f1 \cf5 \cb1 string\cf0  string_name (\cf6 Number_of_Characters, Value_for_Initializing_Characters\cf0 )\cf6 ;\
\
\pard\tx14320\tx19840\pardeftab720\rtlpar\qr

\f3\b\fs32 \cf0 \cb3 \'e4\uc0\u1705 \'ca\'e5
\f0  
\f3 \'c8\'d3\uc0\u1740 \'c7\'d1
\f0  
\f3 \'e3\'e5\'e3
\f0  \uc0\u8235 :
\b0 \uc0\u8236  
\f3 \'e4\'c7\'e3 \uc0\u1740 \u1705  
\f0 String
\f3  \ul \'e5\'e3 \'c7\'d4\'c7\'d1\'e5 \'90\'d1 \'c8\'e5 \'cf\'e4\'c8\'c7\'e1\'e5 \uc0\u1705 \'c7\'d1\'c7\u1705 \'ca\'d1\u1740 \ulnone  \'e3\'d1\'c8\'e6\'d8\'e5 \'c7\'d3\'ca \'e6 \ul \'e5\'e3 \'c8\uc0\u1740 \'c7\'e4 \u1705 \'e4\'e4\'cf\'e5 \'e3\'cd\'ca\'e6\'c7\u1740  \'c2\'e4\ulnone  \'e3\uc0\u1740  \'c8\'c7\'d4\'cf\uc0\u8235 .\uc0\u8236 \
\
\pard\pardeftab720

\f1\fs28 \cf0 \cb1 string_name 
\f2\b\fs36 ==>
\f1\b0\fs28  char *
\f0\b \cb3 \
\
Important 1
\b0 \cb3 : The 
\i \cf4 \cb3 \ul \ulc4 string_name
\i0 \cf0 \ulnone  is a pointer to the characters that we have in the string. --> 
\b A pointer to the \ul First Element\ulnone  in the string
\b0 .\
\
\pard\pardeftab720

\b \cf0 Important 2
\b0 : The 
\f1 \cf8 \cb1 "\cf4 Characters_Region\cf8 "
\f0 \cf0 \cb3  by itself is a pointer to the characters that there are in the string.\
\
 3) 
\f1 \cf5 \cb1 stream << string(initial_size, initial_characters);\
\

\f0\b \cf0 \cb3 Important
\b0 : 
\f1 \cf5 \cb1 string(initial_size, initial_characters)
\f0 \cf0  constructs an unnamed and temporary string with size, 
\f1 \cf5 initial_size
\f0 \cf0  and initializes all characters to 
\f1 \cf5 initial_characters
\f0 \cf0 .\
\
\cb3 4) 
\f1 \cf5 \cb1 stream << string(iterator_begin, iterator_end);\
\

\f0\b \cf0 \cb3 Important
\b0 : 
\f1 \cf5 \cb1 string(iterator_begin, iterator_end)
\f0 \cf0  constructs an unnamed and temporary string that is equivalent to the content of 
\f1 \cf5 iterator_begin
\f0 \cf0  to 
\f1 \cf5 iterator_end
\f0 \cf0 .\cb3 \
\
\pard\pardeftab720

\b \cf0 \cb1 Concatenating Strings:\
\
\pard\pardeftab720

\b0 \cf0 We can concatenate some Strings by "Plus" operator.  -->  Plus Operator:
\b\fs36  +
\fs28 \
\

\b0 We can concatenate one String with one or more String Literal by "Plus" operator.  -->  Plus Operator:
\b\fs36  +\
\
\pard\pardeftab720

\b0\fs28 \cf0 \ul Notice:\ulnone  In all cases, at least \ul one of the operands should be String\ulnone  and \ul It should be the 
\b First
\b0  Operand\ulnone .
\b \
\
Related Accessories:
\b0 \
\
\pard\tx720\pardeftab720
\cf0 1) 
\f1 \cf2 string_name.empty()
\f0 \cf0 : Tests to see if string is empty !\
2) 
\f1 \cf2 string_name.size()
\f0 \cf0 : Finds how many items are in string for character type (
\b \ul not considering the null terminated character
\b0 \ulnone )\
3) 
\f1 \cf2 string_name.push_back(*)
\f0 \cf0 : Pushes 
\f2\b \cf4 *
\f0\b0 \cf0  in onto the end of string --> 
\f2\b \cf4 *
\f0\b0 \cf0 : It should be 
\f1 \cf4 char
\f0 \cf0  type\
4) 
\f1 \cf2 string_name.pop_back()
\f0 \cf0 : Pops the back of the string off --> Reducing the string size\
5) 
\f1 \cf2 string_name.c_str()
\f0 \cf0 : Returns a pointer to the string. -->  
\f1 \cf2 string_name.c_str() 
\f2\b\fs32 \cf9 ==
\f1\b0\fs28 \cf2  string_name\

\f0 \cf0 6) 
\f1 \cf2 string_name.substr(pos, length)
\f0 \cf0 : Returns a newly constructed string with size 
\f1 \cf2 length
\f0 \cf0  and its value initialized to a copy of the specified portion of the 
\f1 \cf2 string_name
\f0 \cf0  string.\
\
\pard\tx720\pardeftab720\qr

\b\fs32 \cf0 \
\pard\tx720\pardeftab720\rtlpar\qr

\f3 \cf0 \'e4\uc0\u1705 \'ca\'e5
\f0  \uc0\u8235 :\uc0\u8236  
\f3\b0 \'c7\uc0\u1740 \'e4
\f0  
\f3 \'ca\'c7\'c8\'da \uc0\u1740 \u1705  
\f0 String
\f3  \'c8\'d1 \'e3\'c8\'e4\'c7\uc0\u1740  
\f0 String
\f3  \'81\'cf\'d1 \uc0\u1740 \'da\'e4\u1740  
\f1\fs28 \cf2 string_name
\f3\fs32 \cf0  \'e3\uc0\u1740  \'d3\'c7\'d2\'cf \'e6 \'c8\'cf\u1740 \'e4 \'d5\'e6\'d1\'ca \'da\'e3\'e1 \'e3\u1740  \u1705 \'e4\'cf \u1705 \'e5 \'d2\u1740 \'d1 \'d1\'d4\'ca\'e5 \'d3\'c7\'ce\'ca\'e5 \'d4\'cf\'e5 \'c7\'d2 \'e3\u1705 \'c7\'e4 
\f1\fs28 \cf2 pos
\f3\fs32 \cf0  \'d1\'d4\'ca\'e5 \'81\'cf\'d1 \'d4\'d1\'e6\'da \'d4\'cf\'e5 \'e6 \'c8\'e5 \'c7\'e4\'cf\'c7\'d2\'e5 
\f1\fs28 \cf2 length
\f3\fs32 \cf0  \'c7\'d2 \'c2\'e4 \'d1\'c7 \'cf\'d1 \'c8\'d1 \'e3\uc0\u1740  \'90\u1740 \'d1\'cf\uc0\u8235 .\uc0\u8236  \'e1\'c7\'d2\'e3 \'c8\'e5 \'d0\uc0\u1705 \'d1 \'c7\'d3\'ca \u1705 \'e5 \'c7\'90\'d1 \'c7\'d2 \'e3\u1705 \'c7\'e4 
\f1\fs28 \cf2 pos
\f3\fs32 \cf0  \'d1\'d4\'ca\'e5 \'d1\'c7 \'c8\'d3\'c7\'d2\uc0\u1740 \'e3 \'e6\'e1\u1740  \'e3\'de\'cf\'c7\'d1 \'dd\'c7\'d5\'e1\'e5 
\f1\fs28 \cf2 pos
\f3\fs32 \cf0  \'ca\'c7 \'c7\'e4\'ca\'e5\'c7\uc0\u1740  
\f0 String
\f3  \uc0\u1705 \'e3\'ca\'d1 \'c7\'d2 
\f1\fs28 \cf2 length
\f3\fs32 \cf0  \'c8\'c7\'d4\'cf \'cf\'d1 \'c7\uc0\u1740 \'e4 \'d5\'e6\'d1\'ca \'c7\'e4\'ca\'e5\'c7\u1740  \'d2\u1740 \'d1 \'d1\'d4\'ca\'e5 \'ca\'c7 \'c7\'e4\'ca\'e5\'c7\u1740  \'d1\'d4\'ca\'e5 \'81\'cf\'d1 \'c8\'e6\'cf\'e5 \'e6 
\f1\fs28 \cf2 length
\f3\fs32 \cf0  \'cf\'d1 \'e4\'d9\'d1 \'90\'d1\'dd\'ca\'e5 \'e4\'e3\uc0\u1740  \'d4\'e6\'cf\uc0\u8235 .
\f0\fs28 \uc0\u8236 \
\pard\tx720\pardeftab720

\b\fs36 \cf0 \
\pard\tx720\pardeftab720

\b0\fs28 \cf0 7) 
\f1 \cf2 istream & getline(istream & is, string & str, char delim)
\f0 \cf0 : Extracts characters from stream (
\f2\b \cf2 is
\f0\b0 \cf0 ) and stores them into string (
\f2\b \cf2 str
\f0\b0 \cf0 ) until the delimitation character (
\f2\b \cf2 delim
\f0\b0 \cf0 ) is found.\
\
\pard\tx720\pardeftab720

\b \cf0 Notice:
\b0  If the character 
\f2\b \cf2 delim
\f0\b0 \cf0  haven't been specified, then reading and storing would be terminated if 
\f2\b \cf10 '\\n'
\f0\b0 \cf0  have been found.\
\
\pard\tx720\pardeftab720\rtlpar\qr

\f3\b\fs32 \cf0 \'e4\uc0\u1705 \'ca\'e5 
\f4 \uc0\u8235 :
\f3 \uc0\u8236  
\b0 \'c7\uc0\u1740 \'e4 \'ca\'c7\'c8\'da \'a1 \u1705 \'c7\'d1\'c7\u1705 \'ca\'d1 \'e5\'c7 \'d1\'c7 \'c8\'e5 \'ca\'d1\'ca\u1740 \'c8 \'c7\'d2 
\f0 Stream
\f3  \'ce\'e6\'c7\'e4\'cf\'e5 \'e6 \'cf\'d1 
\f0 String
\f3  \'d0\'ce\uc0\u1740 \'d1\'e5 \'e3\u1740  \u1705 \'e4\'cf \'ca\'c7 \'d2\'e3\'c7\'e4\u1740  \u1705 \'e5 \'c8\'e5 \u1705 \'c7\'d1\'c7\u1705 \'ca\'d1 \'e3\'cd\'cf\'e6\'cf \u1705 \'e4\'e4\'cf\'e5 
\f0 delim
\f3  \'c8\'d1\'ce\'e6\'d1\'cf \'e4\'e3\'c7\uc0\u1740 \'cf\uc0\u8235 .\uc0\u8236  \uc0\u1740 \'da\'e4\u1740  \'c7\u1740 \'e4 \u1705 \'c7\'d1\'c7\u1705 \'ca\'d1 \'c8\'c7\'da\'cb \'81\'c7\u1740 \'c7\'e4 \u1740 \'c7\'dd\'ca\'e4 \'ca\'c7\'c8\'da \'e3\u1740  \'90\'d1\'cf\'cf.\
\

\b \'e3\'e5\'e3 
\f4 :
\f3  
\b0 \'e1\'c7\'d2\'e3 \'c8\'e5 \'d0\uc0\u1705 \'d1 \'c7\'d3\'ca \u1705 \'e5 \'c7\'90\'d1 \u1705 \'c7\'d1\'c7\u1705 \'ca\'d1 
\f2\b\fs28 \cf2 delim
\f3\b0\fs32 \cf0  \'ca\'da\uc0\u1740 \u1740 \'e4 \'e4\'90\'d1\'cf\'cf \'a1 \'cf\'d1 \'c7\u1740 \'e4 \'d5\'e6\'d1\'ca \'ca\'c7\'c8\'da \'c8\'e5 \'e6\'d3\u1740 \'e1\'e5 \u1705 \'c7\'d1\'c7\u1705 \'ca\'d1 
\f2\b\fs28 \cf10 'n\\'
\f3\b0\fs32 \cf0  \'81\'c7\uc0\u1740 \'c7\'e4 \'e3\u1740  \u1740 \'c7\'c8\'cf.
\f0\b\fs36 \
\pard\tx720\pardeftab720
\cf0 \
\pard\tx720\pardeftab720

\b0\fs28 \cf0 8) 
\f1 \cf2 string_name.insert(pos, str)
\f0 \cf0 : Inserts string 
\f1 \cf2 str
\f0 \cf0  at the position 
\f1 \cf2 pos
\f0 \cf0  of string 
\f1 \cf2 string_name
\f0 \cf0 .\
\
9) 
\f1 \cf2 string::size_type
\f0 \cf0 : The proper type for the variable that contains the number of elements in a string. It can be useful for the return value of 
\f2\b \cf2 string.size()
\f0\b0 \cf0  function or \ul Index variable\ulnone  of the string.
\b\fs36 \
\'85\
\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat13 \tamart160 \tamarb160 \trbrdrt\brdrs\brdrw20\brdrcf12 \trbrdrl\brdrs\brdrw20\brdrcf12 \trbrdrr\brdrs\brdrw20\brdrcf12 
\clvertalc \clcbpat11 \clwWidth460\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf12 \clbrdrl\brdrs\brdrw20\brdrcf12 \clbrdrb\brdrs\brdrw20\brdrcf12 \clbrdrr\brdrs\brdrw20\brdrcf12 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx4320
\clvertalc \clcbpat11 \clwWidth10300\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf12 \clbrdrl\brdrs\brdrw20\brdrcf12 \clbrdrb\brdrs\brdrw20\brdrcf12 \clbrdrr\brdrs\brdrw20\brdrcf12 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\fs24 \cf0 S.N.\cell 
\pard\intbl\itap1\pardeftab720
\cf0 Function & Purpose\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat13 \tamart160 \tamarb160 \trbrdrl\brdrs\brdrw20\brdrcf12 \trbrdrr\brdrs\brdrw20\brdrcf12 
\clvertalc \clshdrawnil \clwWidth460\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf12 \clbrdrl\brdrs\brdrw20\brdrcf12 \clbrdrb\brdrs\brdrw20\brdrcf12 \clbrdrr\brdrs\brdrw20\brdrcf12 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth10300\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf12 \clbrdrl\brdrs\brdrw20\brdrcf12 \clbrdrb\brdrs\brdrw20\brdrcf12 \clbrdrr\brdrs\brdrw20\brdrcf12 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b0 \cf0 1\cell 
\pard\intbl\itap1\pardeftab720

\b \cf0 strcpy(s1, s2);
\b0 \
Copies string s2 into string s1. But "strncpy()" can copy 'N' elements of string s2 into string s1. \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat13 \tamart160 \tamarb160 \trbrdrl\brdrs\brdrw20\brdrcf12 \trbrdrr\brdrs\brdrw20\brdrcf12 
\clvertalc \clshdrawnil \clwWidth460\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf12 \clbrdrl\brdrs\brdrw20\brdrcf12 \clbrdrb\brdrs\brdrw20\brdrcf12 \clbrdrr\brdrs\brdrw20\brdrcf12 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth10300\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf12 \clbrdrl\brdrs\brdrw20\brdrcf12 \clbrdrb\brdrs\brdrw20\brdrcf12 \clbrdrr\brdrs\brdrw20\brdrcf12 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720
\cf0 2\cell 
\pard\intbl\itap1\pardeftab720

\b \cf0 strcat(s1, s2);
\b0 \
Concatenates string s2 onto the end of string s1.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat13 \tamart160 \tamarb160 \trbrdrl\brdrs\brdrw20\brdrcf12 \trbrdrb\brdrs\brdrw20\brdrcf12 \trbrdrr\brdrs\brdrw20\brdrcf12 
\clvertalc \clshdrawnil \clwWidth460\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf12 \clbrdrl\brdrs\brdrw20\brdrcf12 \clbrdrb\brdrs\brdrw20\brdrcf12 \clbrdrr\brdrs\brdrw20\brdrcf12 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth10300\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf12 \clbrdrl\brdrs\brdrw20\brdrcf12 \clbrdrb\brdrs\brdrw20\brdrcf12 \clbrdrr\brdrs\brdrw20\brdrcf12 \clpadt100 \clpadl100 \clpadb100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720
\cf0 3\cell 
\pard\intbl\itap1\pardeftab720

\b \cf0 strlen(s1);
\b0 \
Returns the length of string s1.   ==   s1.size()\cell \lastrow\row
}