{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset178 GeezaPro;\f2\fnil\fcharset0 LucidaGrande;
\f3\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red74\green0\blue230;}
\margl1440\margr1440\vieww32080\viewh10100\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs36 \cf0 "allocator" Template Class\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qr

\f1\b0\fs32 \cf0 \'c7\uc0\u1740 \'e4
\f0  
\f1 \uc0\u1705 \'e1\'c7\'d3
\f0  
\f1 \'c8\'d1\'c7\uc0\u1740 
\f0  
\f1 \ul \'ca\'ce\'d5\uc0\u1740 \'d5 \'c8\'ce\'d4\u1740  \'c7\'d2 \'cd\'c7\'dd\'d9\'e5\ulnone  
\f2 (
\f1 \'e3\'d8\'c7\'c8\'de \'e4\uc0\u1740 \'c7\'d2
\f2 )
\f1  \'c8\uc0\u1705 \'c7\'d1 \'e3\u1740  \'d1\'e6\'cf \u1705 \'e5 \'c8\'ca\'e6\'c7\'e4\'cf 
\f2 Object
\f1  \'e5\'c7\uc0\u1740  \'e3\'d1\'c8\'e6\'d8\'e5 \'d1\'c7 \'cf\'d1 \'ce\'e6\'cf \'cc\'c7\u1740  \'cf\'e5\'cf \'e6 \u1740 \u1705  \'c7\'d4\'c7\'d1\'e5 \'90\'d1 \'c8\'e5 \'c7\'c8\'ca\'cf\'c7\u1740  \'c8\'ce\'d4 \'ca\'ce\'d5\u1740 \'d5 \u1740 \'c7\'dd\'ca\'e5 \'c8\'d1 \'90\'d1\'cf\'c7\'e4\'cf. \'c7\u1740 \'e4 \u1705 \'e1\'c7\'d3 \'c8\'c7 \'d4\'d4 \'ca\'c7\'c8\'da \'e3\'e5\'e3 \u1705 \'c7\'d1 \'e3\u1740  \u1705 \'e4\'cf \u1705 \'e5 \'8d\'e5\'c7\'d1 \'ca\'c7\u1740  \'c2\'e4 \'e5\'c7 
\f2 Member
\f1  
\f2 Function
\f1  \'e6 \'cf\'e6 \'ca\'c7\uc0\u1740  \'cf\u1740 \'90\'d1 
\f2 Non\uc0\u8234 -\uc0\u8236 Member
\f1  
\f2 Function
\f1  \'e5\'d3\'ca\'e4\'cf.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f2 \cf0 Header:
\f1  
\f3 <memory>	
\fs28 // For managing dynamic memory
\fs32 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\fs28 \cf2 template <class T>\
\
class allocator \{\
\
	T* allocate (size_t);					// Allocates a space in memory with specified size.\
	void deallocate (T*, size_t);			// Deallocates the allocated space.\
	void construct (T*, const T&);			// Makes and Initializes the element at specified location.\
	void destroy (T*);					// Destroys the element at specified location.\
\
\};\
\
template <class In, Class For>\
For uninitialized_copy (In begin, In end, For dest);             // Copies the elements of the range [begin end) at "dest" location and then returns the iterator to the end of the copied location.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\rtlpar\qr

\f1\b\fs32 \cf0 \'e4\uc0\u1705 \'ca\'e5
\f0  \uc0\u8235 :\uc0\u8236  
\f1\b0 \'ca\'dd\'c7\'e6\'ca \'c7\uc0\u1740 \'e4 \'ca\'c7\'c8\'da \'c8\'c7 \'ca\'c7\'c8\'da 
\f3 \cf2 copy
\f1 \cf0  \'cf\'d1 \'c7\uc0\u1740 \'e4 \'c7\'d3\'ca \u1705 \'e5 \'c7\u1740 \'e4 \'ca\'c7\'c8\'da \'e5\'e3 \'cf\'d1 \'e3\u1705 \'c7\'e4 
\f0 Object
\f1  \'a1 
\f3 \cf2 dest
\f1 \cf0  \'c7\uc0\u1740 \'cc\'c7\'cf \'e3\u1740  \u1705 \'e4\'cf \'e6 \'e5\'e3 
\f0 Object
\f1  \'c7\uc0\u1740 \'cc\'c7\'cf \'d4\'cf\'e5 \'d1\'c7 \'e3\'de\'cf\'c7\'d1 \'cf\'e5\u1740  \'e3\u1740  \u1705 \'e4\'cf \'e6\'e1\u1740  \'ca\'c7\'c8\'da 
\f3 \cf2 copy
\f1 \cf0  \'ca\'e4\'e5\'c7 \'de\'c7\'c8\'e1\uc0\u1740 \'ca \'e3\'de\'cf\'c7\'d1 \'cf\'e5\u1740  \'d1\'c7 \'cf\'c7\'d1\'cf \'e6 \'c8\'e5 \'e5\'e3\u1740 \'e4 \'cf\'e1\u1740 \'e1 \'cf\'d1 \'c2\'e4 \'c7\'d2 \'ca\'c7\'c8\'da 
\f3\fs28 \cf2 back\uc0\u8234 _\uc0\u8236 inserter\uc0\u8234 (\uc0\u8236 val\uc0\u8234 )
\f1\fs32 \cf0 \uc0\u8236  \'c7\'d3\'ca\'dd\'c7\'cf\'e5 \'e3\uc0\u1740  \'d4\'e6\'cf.
\f3\fs28 \cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf2 \
template <class T, class For>\
void uninitialized_fill (For begin, For end, const T& val);
\f1\fs32 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qr
\cf0 \
}